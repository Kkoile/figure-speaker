#!/bin/bash
set -uo pipefail
trap 's=$?; echo "$0: Error on line "$LINENO": $BASH_COMMAND"; exit $s' ERR
IFS=$'\n\t'

if [[ $EUID -ne 0 ]]; then
    echo "This script must be run as root" 1>&2
    exit 1
fi

size="${1:-2G}"
image="${2:-figure-speaker.img}"
mount="mnt"
script="setup"

rpi_tar="image.zip"
rpi_url="https://downloads.raspberrypi.org/raspbian_lite_latest"

# Unmount drives and general cleanup on exit, the trap ensures this will always
# run execpt in the most extream cases.
cleanup() {
    [[ -f "${mount}/tmp/${script}" ]] && rm "${mount}/tmp/${script}"
    if [[ -d "${mount}" ]]; then
        umount "${mount}/dev" || true
        umount "${mount}/proc" || true
        umount "${mount}/sys" || true
        umount "${mount}/boot" || true
	    umount "${mount}" || true
        rmdir "${mount}" || true
    fi
    [ -n "${loopdev:-}" ] && losetup --detach "${loopdev}" || true
}
trap cleanup EXIT

# Download archlinux arm only if we have not already done so
[ ! -f "${rpi_tar}" ] && wget -O ${rpi_tar} "${rpi_url}"

unzip ${rpi_tar}
mv "2018-06-27-raspbian-stretch-lite.img" ${image}
rm ${rpi_tar}

fdisk -lu ${image}

dd if=/dev/zero bs=1M count=1024 >> ${image}
loopdev=$(losetup --find --show "${image}")
parted --script "${loopdev}" mklabel msdos
parted --script "${loopdev}" mkpart primary fat32 0% 100M
parted --script "${loopdev}" mkpart primary ext4 100M 100%
bootdev=$(ls "${loopdev}"*1)
rootdev=$(ls "${loopdev}"*2)
mkfs.vfat -F32 ${bootdev}
mkfs.ext4 -F ${rootdev}

echo "loopdev"
echo ${loopdev}
echo "rootdev"
echo ${rootdev}
echo "bootdev"
echo ${bootdev}

mkdir ${mount}
mount ${rootdev} -o rw ${mount}
mount ${bootdev} -o rw ${mount}/boot

cd ${mount}
mount --bind /dev dev/
mount --bind /sys sys/
mount --bind /proc proc/
mount --bind /dev/pts dev/pts

mv ${mount}/etc/ld.so.preload ${mount}/etc/ld.so.preload2
touch ${mount}/etc/ld.so.preload

cp /usr/bin/qemu-arm-static ${mount}/usr/bin

# Copy our installation script and other artifacts
install -Dm755 "${script}" "${mount}/tmp/${script}"

# Run the setup script inside the chroot
chroot ${mount} "/tmp/${script}"
